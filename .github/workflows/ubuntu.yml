name: "Ubuntu"

on: [ push, pull_request ]

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        label: [ "" ]
        cxx: [ g++-10, clang++-10 ]
        build_type: [ Debug, Release ]
        std: [ 17 ]
        include:
          - cxx: g++-7
            build_type: Debug
            std: 17
            install: sudo apt-get install g++-7
          - cxx: g++-11
            build_type: Debug
            std: 20
            install: sudo apt-get install g++-11

          - cxx: clang++-6.0
            build_type: Debug
            std: 17
            install: sudo apt-get install clang-6.0
          - cxx: clang++-7
            build_type: Debug
            std: 17
            cxxflags: -stdlib=libc++
            install: sudo apt-get install clang-7 libc++-7-dev libc++abi-7-dev
          - cxx: clang++-7
            build_type: Release
            std: 17
            install: sudo apt-get install clang-7
          - cxx: clang++-10
            cxxflags: -stdlib=libc++
            install: sudo apt-get install clang-10 libc++-10-dev libc++abi-10-dev
          - cxx: clang++-11
            build_type: Debug
            std: 20
            cxxflags: -stdlib=libc++
            install: sudo apt-get install clang-11 libc++-11-dev libc++abi-11-dev
          - cxx: clang++-11
            build_type: Release
            std: 20
            install: sudo apt-get install clang-11

          - label: sanitizers
            cxx: clang++-12
            build_type: Debug
            std: 20
            cxxflags: -O1 -g -fsanitize=address,undefined,leak,integer -fno-omit-frame-pointer -fno-optimize-sibling-calls

          - label: valgrind-memcheck
            cxx: g++-10
            build_type: Debug
            std: 17
            cxxflags: -O1 -g -fno-omit-frame-pointer -fno-optimize-sibling-calls
            install: sudo apt-get install -y valgrind
            memcheck: true
    steps:
      - uses: actions/checkout@v3

      - name: Create Build Environment
        run: |
          sudo apt-get update
          ${{matrix.install}}
          cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure
        working-directory: ${{runner.workspace}}/build
        env:
          CXX: ${{matrix.cxx}}
          CXXFLAGS: ${{matrix.cxxflags}}
        run: |
          cmake --warn-uninitialized \
                -D CMAKE_BUILD_TYPE=${{matrix.build_type}} \
                -D CMAKE_CXX_STANDARD=${{matrix.std}} \
                -D UREACT_PEDANTIC:BOOL=y \
                -D UREACT_WERROR:BOOL=y \
                -D UREACT_Ð¡TEST:BOOL=y \
                $GITHUB_WORKSPACE

      - name: Build
        working-directory: ${{runner.workspace}}/build
        run: cmake --build . --config ${{matrix.build_type}} -- -j `nproc`

      - name: Test
        if: ${{ !matrix.memcheck }}
        working-directory: ${{runner.workspace}}/build
        run: ctest -C ${{matrix.build_type}} --output-on-failure

      - name: TestMemcheck
        if: ${{ matrix.memcheck }}
        working-directory: ${{runner.workspace}}/build
        run: |
          if ! ctest -C ${{matrix.build_type}} --output-on-failure \
               -T memcheck \
               --overwrite MemoryCheckCommandOptions="--leak-check=full --track-origins=yes --error-exitcode=100" \
          ; then
            find Testing/Temporary -name "MemoryChecker.*.log" -exec cat {} +
            exit 1
          fi
